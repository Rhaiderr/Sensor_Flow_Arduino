# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'G:\Python_Proj\Arduino\Interface\MenuInicial.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets, QtGui
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

from Interface.Graphics import Temp, Flow


class CanvasConf(FigureCanvas):
    """ QWidget com configurações de gráfico. """

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        self.fig = Figure(figsize=(width, height), dpi=dpi, constrained_layout=False, tight_layout=True)
        self.axes = self.fig.add_subplot(1, 1, 1)

        self.initial_figure()

        FigureCanvas.__init__(self, self.fig)
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self,
                                   QtWidgets.QSizePolicy.Expanding,
                                   QtWidgets.QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)

    def initial_figure(self):
        pass


class Canvas_Temp(CanvasConf):
    """ Função que atualiza o grafico a cada segundo a partir das informações contidas no banco de dados
   para informações de temperatura """

    def __init__(self, *args, **kwargs):
        CanvasConf.__init__(self, *args, **kwargs)
        timer = QtCore.QTimer(self)
        timer.timeout.connect(self.update_figure)
        timer.start(1000)

    def initial_figure(self):
        ax = Temp.temp_axes(ui.slide_value_temp())
        x_axes = ax.x()
        y_axes = ax.y()
        self.axes.plot(x_axes, y_axes, 'r')
        self.fig.autofmt_xdate(rotation=45)

    def update_figure(self):
        ax = Temp.temp_axes(ui.slide_value_temp())
        x_axes = ax.x()
        y_axes = ax.y()
        self.axes.cla()
        self.axes.plot(x_axes, y_axes, 'r')
        self.fig.autofmt_xdate(rotation=45)
        self.draw()
        ui.update_temp_axis(y_axes[-1])


class Canvas_flow(CanvasConf):
    """ Função que atualiza o grafico a cada segundo a partir das informações contidas no banco de dados
    para informações de fluxo"""

    def __init__(self, *args, **kwargs):
        CanvasConf.__init__(self, *args, **kwargs)
        timer = QtCore.QTimer(self)
        timer.timeout.connect(self.update_figure)
        timer.start(1000)

    def initial_figure(self):
        ax = Flow.flow_axes(ui.slide_value_flow())
        x_axes = ax.x()
        y_axes = ax.y()
        self.axes.plot(x_axes, y_axes, 'r')
        self.fig.autofmt_xdate(rotation=45)

    def update_figure(self):
        ax = Flow.flow_axes(ui.slide_value_flow())
        x_axes = ax.x()
        y_axes = ax.y()
        self.axes.cla()
        self.axes.plot(x_axes, y_axes, 'r')
        self.fig.autofmt_xdate(rotation=45)
        self.draw()
        ui.update_flow_axis(y_axes[-1])


class Ui_MenuInicial(object):
    """ Funções para troca de janelas"""

    def setupUi_Temp(self, TempWindow):
        """ Tela de Temperatura """

        self.TempWindow = TempWindow
        self.TempWindow.setObjectName("TempWindow")
        self.TempWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(self.TempWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.fluxo = QtWidgets.QPushButton(self.centralwidget)
        self.fluxo.setGeometry(QtCore.QRect(20, 10, 131, 51))
        self.fluxo.setObjectName("fluxo")
        self.fluxo.clicked.connect(self.fl)

        self.horizontalSliderTemp = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSliderTemp.setGeometry(QtCore.QRect(570, 20, 171, 22))
        self.horizontalSliderTemp.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSliderTemp.setObjectName("horizontalSlider")
        self.horizontalSliderTemp.setMaximum(100)
        self.horizontalSliderTemp.setMinimum(10)

        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(20, 80, 631, 471))
        self.graphicsView.setObjectName("graphicsView")

        self.lcdNumberTemp = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumberTemp.setGeometry(QtCore.QRect(660, 80, 91, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lcdNumberTemp.setFont(font)
        self.lcdNumberTemp.setAutoFillBackground(True)
        self.lcdNumberTemp.setObjectName("lcdNumber")

        self.labelTemp = QtWidgets.QLabel(self.centralwidget)
        self.labelTemp.setGeometry(QtCore.QRect(760, 80, 31, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.labelTemp.setFont(font)
        self.labelTemp.setObjectName("label")

        self.TempWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self.TempWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")

        self.TempWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self.TempWindow)
        self.statusbar.setObjectName("statusbar")

        self.TempWindow.setStatusBar(self.statusbar)

        self.main_widget = QtWidgets.QWidget(self.graphicsView)
        l = QtWidgets.QVBoxLayout(self.main_widget)
        dc = Canvas_Temp(self.main_widget, width=6.2, height=4.7, dpi=100)
        l.addWidget(dc)

        self.retranslateUi_Temp(self.TempWindow)
        QtCore.QMetaObject.connectSlotsByName(self.TempWindow)

    def retranslateUi_Temp(self, TempWindow):
        _translate = QtCore.QCoreApplication.translate
        TempWindow.setWindowTitle(_translate("TempWindow", "MainWindow"))
        self.fluxo.setText(_translate("TempWindow", "Fluxo"))
        self.labelTemp.setText(_translate("TempWindow", "°C"))

    def setupUi_Flow(self, FlowWindow):
        """ Tela de Fluxo """

        self.FlowWindow = FlowWindow
        self.FlowWindow.setObjectName("FlowWindow")
        self.FlowWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(self.FlowWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.temperatura = QtWidgets.QPushButton(self.centralwidget)
        self.temperatura.setGeometry(QtCore.QRect(20, 10, 131, 51))
        self.temperatura.setObjectName("temperatura")
        self.temperatura.clicked.connect(self.temp)

        self.horizontalSliderFlow = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSliderFlow.setGeometry(QtCore.QRect(570, 20, 171, 22))
        self.horizontalSliderFlow.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSliderFlow.setObjectName("horizontalSlider")
        self.horizontalSliderFlow.setMaximum(100)
        self.horizontalSliderFlow.setMinimum(10)

        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(20, 80, 631, 471))
        self.graphicsView.setObjectName("graphicsView")

        self.lcdNumberFlow = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumberFlow.setGeometry(QtCore.QRect(660, 80, 91, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lcdNumberFlow.setFont(font)
        self.lcdNumberFlow.setAutoFillBackground(True)
        self.lcdNumberFlow.setObjectName("lcdNumber")

        self.labelFlow = QtWidgets.QLabel(self.centralwidget)
        self.labelFlow.setGeometry(QtCore.QRect(760, 80, 31, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.labelFlow.setFont(font)
        self.labelFlow.setObjectName("label")

        self.FlowWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self.FlowWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")

        self.FlowWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self.FlowWindow)
        self.statusbar.setObjectName("statusbar")
        self.FlowWindow.setStatusBar(self.statusbar)

        self.main_widget = QtWidgets.QWidget(self.graphicsView)
        l = QtWidgets.QVBoxLayout(self.main_widget)
        dc = Canvas_flow(self.main_widget, width=6.2, height=4.7, dpi=100)
        l.addWidget(dc)

        self.retranslateUi_Flow(self.FlowWindow)
        QtCore.QMetaObject.connectSlotsByName(self.FlowWindow)

    def retranslateUi_Flow(self, FlowWindow):
        _translate = QtCore.QCoreApplication.translate
        FlowWindow.setWindowTitle(_translate("FlowWindow", "MainWindow"))
        self.temperatura.setText(_translate("FlowWindow", "Temperatura"))
        self.labelFlow.setText(_translate("FlowWindow", "L/min"))

    def setupUi(self, MenuInicial):
        """ Menu inicial """

        MenuInicial.setObjectName("MenuInicial")
        MenuInicial.resize(226, 265)

        self.centralwidget = QtWidgets.QWidget(MenuInicial)
        self.centralwidget.setObjectName("centralwidget")
        self.temperatura = QtWidgets.QPushButton(self.centralwidget)
        self.temperatura.setGeometry(QtCore.QRect(50, 140, 131, 51))

        self.temperatura.setObjectName("temperatura")
        self.temperatura.clicked.connect(self.temp)

        self.fluxo = QtWidgets.QPushButton(self.centralwidget)
        self.fluxo.setGeometry(QtCore.QRect(50, 40, 131, 51))
        self.fluxo.setObjectName("fluxo")
        self.fluxo.clicked.connect(self.fl)

        MenuInicial.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MenuInicial)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 226, 21))
        self.menubar.setObjectName("menubar")
        MenuInicial.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MenuInicial)
        self.statusbar.setObjectName("statusbar")
        MenuInicial.setStatusBar(self.statusbar)

        self.retranslateUi(MenuInicial)
        QtCore.QMetaObject.connectSlotsByName(MenuInicial)

    def retranslateUi(self, MenuInicial):
        _translate = QtCore.QCoreApplication.translate
        MenuInicial.setWindowTitle(_translate("MenuInicial", "MainWindow"))
        self.temperatura.setText(_translate("MenuInicial", "Temperatura"))
        self.fluxo.setText(_translate("MenuInicial", "Fluxo"))

    def fl(self):
        """ Função que realiza a troca para tela de Fluxo"""

        ui.setupUi_Flow(MenuInicial)

    def temp(self):
        """ Função que realiza a troca para tela de Temperatura"""

        ui.setupUi_Temp(MenuInicial)

    def update_flow_axis(self, event):
        """ Função que atualiza o display de FLuxo"""

        self.lcdNumberFlow.display(event)

    def update_temp_axis(self, event):
        """ Função que atualiza o display de FLuxo"""

        self.lcdNumberTemp.display(event)

    def slide_value_flow(self):
        """ Retorna valor atual do slider de FLuxo """

        return self.horizontalSliderFlow.value()

    def slide_value_temp(self):
        """ Retorna valor atual do slider de FLuxo """

        return self.horizontalSliderTemp.value()


def close_sensor():
    """ Finaliza o programa SerialConnection parando de capturar valores do arduino"""
    for child in psutil.Process(proce.pid).children(recursive=True):
        child.kill()
    proce.kill()


if __name__ == "__main__":
    import sys
    import subprocess
    from ETL.SqlConnection import *
    import psutil

    # Inicia leitura do sensor
    proce = subprocess.Popen([sys.executable, "ETL/SerialConnection.py"], shell=True, cwd=str(dire()))

    # Inicia interface
    app = QtWidgets.QApplication(sys.argv)
    MenuInicial = QtWidgets.QMainWindow()
    ui = Ui_MenuInicial()
    ui.setupUi(MenuInicial)
    MenuInicial.show()

    # Finaliza processo
    app.lastWindowClosed.connect(close_sensor)

    sys.exit(app.exec_())
