# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'G:\Python_Proj\Arduino\Interface\MenuInicial.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

from Interface.Graphics import Temp, Flow


class MyMplCanvas(FigureCanvas):
    """ QWidget com configurações de gráfico. """

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        self.fig = Figure(figsize=(width, height), dpi=dpi, constrained_layout=False)
        self.axes = self.fig.add_subplot(1, 1, 1)

        self.compute_initial_figure()

        FigureCanvas.__init__(self, self.fig)
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self,
                                   QtWidgets.QSizePolicy.Expanding,
                                   QtWidgets.QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)

    def compute_initial_figure(self):
        pass


class MyDynamicMplCanvas_Temp(MyMplCanvas):
    """ Função que atualiza o grafico a cada segundo a partir das informações contidas no banco de dados
   para informações de temperatura """

    def __init__(self, *args, **kwargs):
        MyMplCanvas.__init__(self, *args, **kwargs)
        timer = QtCore.QTimer(self)
        timer.timeout.connect(self.update_figure)
        timer.start(100)

    def compute_initial_figure(self):
        self.axes.plot(Temp.temp_axes().x(), Temp.temp_axes().y(), 'r')

    def update_figure(self):
        # Build a list of 4 random integers between 0 and 10 (both inclusive)
        # l = [random.randint(0, 10) for i in range(4)]
        self.axes.cla()
        self.axes.plot(Temp.temp_axes().x(), Temp.temp_axes().y(), 'r')
        self.fig.autofmt_xdate(rotation=45)
        self.draw()


class MyDynamicMplCanvas_flow(MyMplCanvas):
    """ Função que atualiza o grafico a cada segundo a partir das informações contidas no banco de dados
    para informações de fluxo"""

    def __init__(self, *args, **kwargs):
        MyMplCanvas.__init__(self, *args, **kwargs)
        timer = QtCore.QTimer(self)
        timer.timeout.connect(self.update_figure)
        timer.start(100)

    def compute_initial_figure(self):
        self.axes.plot(Flow.flow_axes().x(), Flow.flow_axes().y(), 'r')

    def update_figure(self):
        # Build a list of 4 random integers between 0 and 10 (both inclusive)
        # l = [random.randint(0, 10) for i in range(4)]
        self.axes.cla()
        self.axes.plot(Flow.flow_axes().x(), Flow.flow_axes().y(), 'r')
        self.fig.autofmt_xdate(rotation=45)
        self.draw()


class Ui_MenuInicial(object):
    """ Funções para troca de janelas"""

    def setupUi_Temp(self, TempWindow):
        """ Tela de Temperatura """

        self.TempWindow = TempWindow
        self.TempWindow.setObjectName("TempWindow")
        self.TempWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(self.TempWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.fluxo = QtWidgets.QPushButton(self.centralwidget)
        self.fluxo.setGeometry(QtCore.QRect(20, 10, 131, 51))
        self.fluxo.setObjectName("fluxo")
        self.fluxo.clicked.connect(self.fl)

        self.relatorio = QtWidgets.QPushButton(self.centralwidget)
        self.relatorio.setGeometry(QtCore.QRect(680, 20, 91, 31))
        self.relatorio.setObjectName("relatorio")

        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(20, 80, 631, 471))
        self.graphicsView.setObjectName("graphicsView")

        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(690, 90, 64, 23))
        self.lcdNumber.setObjectName("lcdNumber")

        self.TempWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self.TempWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")

        self.TempWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self.TempWindow)
        self.statusbar.setObjectName("statusbar")

        self.TempWindow.setStatusBar(self.statusbar)

        self.main_widget = QtWidgets.QWidget(self.graphicsView)
        l = QtWidgets.QVBoxLayout(self.main_widget)
        dc = MyDynamicMplCanvas_Temp(self.main_widget, width=6.1, height=4.5, dpi=100)
        l.addWidget(dc)

        self.retranslateUi_Temp(self.TempWindow)
        QtCore.QMetaObject.connectSlotsByName(self.TempWindow)

    def retranslateUi_Temp(self, TempWindow):
        _translate = QtCore.QCoreApplication.translate
        TempWindow.setWindowTitle(_translate("TempWindow", "MainWindow"))
        self.fluxo.setText(_translate("TempWindow", "Fluxo"))
        self.relatorio.setText(_translate("TempWindow", "Relatório"))

    def setupUi_Flow(self, FlowWindow):
        """ Tela de Fluxo """

        self.FlowWindow = FlowWindow
        self.FlowWindow.setObjectName("FlowWindow")
        self.FlowWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(self.FlowWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.temperatura = QtWidgets.QPushButton(self.centralwidget)
        self.temperatura.setGeometry(QtCore.QRect(20, 10, 131, 51))
        self.temperatura.setObjectName("temperatura")
        self.temperatura.clicked.connect(self.temp)

        self.relatorio = QtWidgets.QPushButton(self.centralwidget)
        self.relatorio.setGeometry(QtCore.QRect(680, 20, 91, 31))
        self.relatorio.setObjectName("relatorio")

        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(20, 80, 631, 471))
        self.graphicsView.setObjectName("graphicsView")

        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(690, 90, 64, 23))
        self.lcdNumber.setObjectName("lcdNumber")

        self.FlowWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self.FlowWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")

        self.FlowWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self.FlowWindow)
        self.statusbar.setObjectName("statusbar")
        self.FlowWindow.setStatusBar(self.statusbar)

        self.main_widget = QtWidgets.QWidget(self.graphicsView)
        l = QtWidgets.QVBoxLayout(self.main_widget)
        dc = MyDynamicMplCanvas_flow(self.main_widget, width=6.1, height=4.5, dpi=100)
        l.addWidget(dc)

        self.retranslateUi_Flow(self.FlowWindow)
        QtCore.QMetaObject.connectSlotsByName(self.FlowWindow)

    def retranslateUi_Flow(self, FlowWindow):
        _translate = QtCore.QCoreApplication.translate
        FlowWindow.setWindowTitle(_translate("TempWindow", "MainWindow"))
        self.temperatura.setText(_translate("TempWindow", "Temperatura"))
        self.relatorio.setText(_translate("TempWindow", "Relatório"))

    def setupUi(self, MenuInicial):
        """ Menu inicial """

        MenuInicial.setObjectName("MenuInicial")
        MenuInicial.resize(226, 265)

        self.centralwidget = QtWidgets.QWidget(MenuInicial)
        self.centralwidget.setObjectName("centralwidget")
        self.temperatura = QtWidgets.QPushButton(self.centralwidget)
        self.temperatura.setGeometry(QtCore.QRect(50, 90, 131, 51))

        self.temperatura.setObjectName("temperatura")
        self.temperatura.clicked.connect(self.temp)

        self.fluxo = QtWidgets.QPushButton(self.centralwidget)
        self.fluxo.setGeometry(QtCore.QRect(50, 30, 131, 51))
        self.fluxo.setObjectName("fluxo")
        self.fluxo.clicked.connect(self.fl)

        self.relatorio = QtWidgets.QPushButton(self.centralwidget)
        self.relatorio.setGeometry(QtCore.QRect(50, 150, 131, 51))
        self.relatorio.setObjectName("relatorio")

        MenuInicial.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MenuInicial)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 226, 21))
        self.menubar.setObjectName("menubar")
        MenuInicial.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MenuInicial)
        self.statusbar.setObjectName("statusbar")
        MenuInicial.setStatusBar(self.statusbar)

        self.retranslateUi(MenuInicial)
        QtCore.QMetaObject.connectSlotsByName(MenuInicial)

    def retranslateUi(self, MenuInicial):
        _translate = QtCore.QCoreApplication.translate
        MenuInicial.setWindowTitle(_translate("MenuInicial", "MainWindow"))
        self.temperatura.setText(_translate("MenuInicial", "Temperatura"))
        self.fluxo.setText(_translate("MenuInicial", "Fluxo"))
        self.relatorio.setText(_translate("MenuInicial", "Relatório"))

    def fl(self):
        """ Função que realiza a troca para tela de Fluxo"""

        ui.setupUi_Flow(MenuInicial)

    def temp(self):
        """ Função que realiza a troca para tela de Temperatura"""

        ui.setupUi_Temp(MenuInicial)


def close_sensor():
    """ Finaliza o programa SerialConnection parando de capturar valores do arduino"""
    for child in psutil.Process(proce.pid).children(recursive=True):
        child.kill()
    proce.kill()


if __name__ == "__main__":
    import sys
    import subprocess
    from ETL.SqlConnection import *
    import psutil

    # Inicia leitura do sensor
    proce = subprocess.Popen([sys.executable, "ETL/SerialConnection.py"], shell=True, cwd=str(dire()))

    # Inicia interface
    app = QtWidgets.QApplication(sys.argv)
    MenuInicial = QtWidgets.QMainWindow()
    ui = Ui_MenuInicial()
    ui.setupUi(MenuInicial)
    MenuInicial.show()

    # Finaliza processo
    app.lastWindowClosed.connect(close_sensor)

    sys.exit(app.exec_())
